--- wine-7.20/dlls/winex11.drv/vulkan.c.orig	2022-10-31 17:47:59.000000000 -0400
+++ wine-7.20/dlls/winex11.drv/vulkan.c	2022-11-30 10:50:51.552332621 -0500
@@ -35,6 +35,7 @@
 
 #include "wine/debug.h"
 #include "x11drv.h"
+#include "xcomposite.h"
 
 #define VK_NO_PROTOTYPES
 #define WINE_VK_HOST
@@ -50,6 +51,7 @@
 static pthread_mutex_t vulkan_mutex;
 
 static XContext vulkan_hwnd_context;
+static XContext vulkan_swapchain_surface_context;
 
 #define VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR 1000004000
 
@@ -60,6 +62,7 @@
     LONG ref;
     struct list entry;
     Window window;
+    HDC child_window_dc;
     VkSurfaceKHR surface; /* native surface */
     HWND hwnd;
     DWORD hwnd_thread_id;
@@ -141,6 +144,7 @@
 #undef LOAD_OPTIONAL_FUNCPTR
 
     vulkan_hwnd_context = XUniqueContext();
+    vulkan_swapchain_surface_context = XUniqueContext();
     return;
 
 fail:
@@ -284,6 +288,7 @@
         const VkSwapchainCreateInfoKHR *create_info,
         const VkAllocationCallbacks *allocator, VkSwapchainKHR *swapchain)
 {
+    VkResult res;
     struct wine_vk_surface *x11_surface = surface_from_handle(create_info->surface);
     VkSwapchainCreateInfoKHR create_info_host;
     TRACE("%p %p %p %p\n", device, create_info, allocator, swapchain);
@@ -297,7 +302,12 @@
     create_info_host = *create_info;
     create_info_host.surface = x11_surface->surface;
 
-    return pvkCreateSwapchainKHR(device, &create_info_host, NULL /* allocator */, swapchain);
+    res = pvkCreateSwapchainKHR(device, &create_info_host, NULL /* allocator */, swapchain);
+    if (res == VK_SUCCESS)
+    {
+        XSaveContext(gdi_display, (XID)(*swapchain), vulkan_swapchain_surface_context, (char *)x11_surface);
+    }
+    return res;
 }
 
 static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
@@ -313,13 +323,6 @@
     if (allocator)
         FIXME("Support for allocation callbacks not implemented yet\n");
 
-    /* TODO: support child window rendering. */
-    if (create_info->hwnd && NtUserGetAncestor(create_info->hwnd, GA_PARENT) != NtUserGetDesktopWindow())
-    {
-        FIXME("Application requires child window rendering, which is not implemented yet!\n");
-        return VK_ERROR_INCOMPATIBLE_DRIVER;
-    }
-
     x11_surface = calloc(1, sizeof(*x11_surface));
     if (!x11_surface)
         return VK_ERROR_OUT_OF_HOST_MEMORY;
@@ -345,6 +348,23 @@
         goto err;
     }
 
+    /* child window rendering. */
+    if (create_info->hwnd && NtUserGetAncestor(create_info->hwnd, GA_PARENT) != NtUserGetDesktopWindow())
+    {
+#ifdef SONAME_LIBXCOMPOSITE
+        if (usexcomposite)
+        {
+            pXCompositeRedirectWindow(gdi_display, x11_surface->window, CompositeRedirectManual);
+            x11_surface->child_window_dc = NtUserGetDCEx(create_info->hwnd, 0, DCX_USESTYLE);
+        }
+        else
+#endif
+        {
+            FIXME("Child window rendering is not supported without X Composite Extension!\n");
+            return VK_ERROR_INCOMPATIBLE_DRIVER;
+        }
+    }
+
     create_info_host.sType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
     create_info_host.pNext = NULL;
     create_info_host.flags = 0; /* reserved */
@@ -415,6 +435,7 @@
         FIXME("Support for allocation callbacks not implemented yet\n");
 
     pvkDestroySwapchainKHR(device, swapchain, NULL /* allocator */);
+    XDeleteContext(gdi_display, (XID)swapchain, vulkan_swapchain_surface_context);
 }
 
 static VkResult X11DRV_vkEnumerateInstanceExtensionProperties(const char *layer_name,
@@ -669,6 +690,21 @@
         }
     }
 
+    for (uint32_t i = 0 ; i < present_info->swapchainCount; ++i)
+    {
+        struct wine_vk_surface *x11_surface;
+        if (!XFindContext(gdi_display, (XID)present_info->pSwapchains[i],
+                          vulkan_swapchain_surface_context, (char **)&x11_surface) &&
+            x11_surface->child_window_dc)
+        {
+            struct x11drv_escape_flush_gl_drawable escape;
+            escape.code = X11DRV_FLUSH_GL_DRAWABLE;
+            escape.gl_drawable = x11_surface->window;
+            escape.flush = TRUE;
+            NtGdiExtEscape(x11_surface->child_window_dc, NULL, 0, X11DRV_ESCAPE, sizeof(escape), (LPSTR)&escape, 0, NULL);
+        }
+    }
+
     return res;
 }
 
